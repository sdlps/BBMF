// $Id: XY/etc/FullSupport/etc/scripts/cvPanelFactory.js 2.0 2019/05/23 18:48:13GMT milind Exp  $ 
//
//
//  THE PANEL FACTORY
//
//

function CV_panelFactory() {
	// Panel Information
	this.componentName = "PanelFactory";
	this.id = "PanelFactory";
	this.panels = new Object();
	this.panels.length = 0;
	this.safePanelIds = new Array();  // A Document-Order list of IDs read from panels.xml

	//resize records:
	this.resizeRecords = new Object();
}

CV_panelFactory.prototype = {

	/*******************************
	*
	* Load Panel list:
	* -reads panels.xml
	* -interprets widths, heights, and relations--creating the DIV elements as needed
	********************************/
	loadPanels: function(setName) {
		CVPortal.debug(" {Panels} *** Loading All Panels ***");
		var pFac = this;
		var startDate = new Date();
		$.ajax({
			type: "GET",
			url: CVPortal.fetchSkinFile("config/panels.xml"),
			dataType: "xml",
			cache: false,
			async: false,
			error: function() {
				CVPortal.error(" {Panels} Failed to load panels from skin (panels.xml) ");
			},
			success: function(xml) {
				pFac.xml = null;
				$("set[id='" + setName + "']", xml).each(function() { pFac.xml = this; });

				if(pFac.xml == null) {
					CVPortal.error(" {Panels} [ FATAL ] Unable to locate the requested set from panels.xml.  Set: " + setName);
					alert(CVPortal.getResource("alert.error.loadPanels ") + ": " + setName);
					return;
				}

				// Establish our Client Size
				pFac.refreshClientSize();
				// Locate all panels and load them in document order:
				$("panel", pFac.xml).each(function() { pFac.loadSinglePanel(this); });
				CVPortal.info(" {Panels}   -> All panels loaded by Panel factory.");
				pFac.applyVariedDimensions();
				pFac.tabletResourcePanelFixer();
			}
		});
		CVPortal.warn(" {Panels} *** Completed loading Panels from configuration file. Took " + (new Date() - startDate) + " MS");
		
		// set up the trigger for WINDOW RESIZE to RESIZE all PANELS:
		$(window).on("resize", function() { 
			CVPortal.clientResize();
			if(CVPortal.getIsTablet() == true && CVPortal.components.cvMedia) { //fixes to various issues when resizing/reorienting the window on a tablet
				if (CVPortal.components.cvMedia.tearOffCount == undefined || CVPortal.components.cvMedia.getProp("tearOff") == 0) { //don't run these steps on a tearoff
					CVPortal.components["cvMedia"].mediaTabletOrientation(); 
					//if(CVPortal.getBrowserPlatform() == "WIN" && $("#rightPanel").is(":visible") && $("#main_content").width() == $("#body_container").width()) $("#body_container").width($("#body_container").width() - 300);
					if(CVPortal.getBrowserPlatform() == "IPAD" && $("#rightPanel").is(":visible")) {
						//setTimeout(function(){$("#body_container").width($("#body_container").width() - 300);},20);
						setTimeout(CVPortal.panelFactory().tabletResourcePanelFixer,30);
					}
				}
			}
		
			//correct incorrect panel sizes generated by applyVariedDimensions
			if ($("#contentPanel").hasClass("resizable-v")) {
				$("#contentPanel").height($("#mainContainer").height() - $("#dmSecurityBanner").height() - $("#dmReviewComments").height()); // LAM amended for DM sec. and comments
				$("#graphicsPanel").height($("#mainContainer").height() - $("#dmSecurityBanner").height() - $("#dmReviewComments").height()); // LAM amended for DM sec. and comments
				$("#graphicsPanel").width($("#mainContainer").width() - $($("#contentPanel")).width()-18);
			} else if ($("#contentPanel").hasClass("resizable-h")) {
				$("#contentPanel").width($("#mainContainer").width());
				$("#graphicsPanel").width($("#mainContainer").width());
				$("#graphicsPanel").height($("#mainContainer").height() - $($("#contentPanel")).height() - $("#dmSecurityBanner").height() - $("#dmReviewComments").height()); // LAM amended for DM sec. and comments
			}
			if ($("#graphicsPanel").hasClass("resizable-v")) {
				$("#contentPanel").height($("#mainContainer").height() - $("#dmSecurityBanner").height() - $("#dmReviewComments").height()); // LAM amended for DM sec. and comments
				$("#graphicsPanel").height($("#mainContainer").height() - $("#dmSecurityBanner").height() - $("#dmReviewComments").height()); // LAM amended for DM sec. and comments
				$("#contentPanel").width($("#mainContainer").width() - $($("#graphicsPanel")).width());
			} else if ($("#graphicsPanel").hasClass("resizable-h")) {
				$("#contentPanel").width($("#mainContainer").width());
				$("#graphicsPanel").width($("#mainContainer").width());
				$("#contentPanel").height($("#mainContainer").height() - $($("#graphicsPanel")).height() - $("#dmSecurityBanner").height() - $("#dmReviewComments").height()); // LAM amended for DM sec. and comments
			}
			if ($("#graphicsPanel").height() == 0 || $("#graphicsPanel").width() == 0) {
				$("#contentPanel").width($("#mainContainer").width());
				$("#contentPanel").height($("#mainContainer").height() - $("#dmSecurityBanner").height() - $("#dmReviewComments").height()); // LAM amended for DM sec. and comments
			}
			$("#dmSecurityBanner").width($("#mainContainer").width()); // LAM amended for DM sec. and comments
			$("#dmReviewComments").width($("#mainContainer").width()); // LAM amended for DM sec. and comments
			if ($("#tocPanel").height() != $("#body_container").height()) $("#tocPanel").height($("#body_container").height());
			if(CVPortal.components.cvMedia) {
				CVPortal.components.cvMedia.resizeControlBar();
			}
			if(CVPortal.components["cvSearch"]) {
				CVPortal.components["cvSearch"].adjustTabletSearchPanels();
			}

			if($("#cvHistory").is(":visible")) { 
				CVPortal.components["cvHistory"].adjustHistoryListHeight();
			}

			if($("#cvEmergencyProcedures").is(":visible")) { 
				CVPortal.components["cvEmergencyProcedures"].adjustEmergencyProceduresHeight();
			}

		});
		//orientationchange only triggers on iPad, and is not needed since the above "resize" event triggers on reorientation on both iPad and Windows tablets
		//$(window).bind("orientationchange", function() { CVPortal.clientResize(); });
	},

	createFakeStub: function() {
		// creates a fake stub panel object that keeps components from breaking:
			//otherwise, create a new control:
			return new CV_panel("fake_stub", this, null);		
	},
	
	destroy: function() {
		delete this.xml;
	},

	//
	//  Create a Single Panel from XML
	//
	loadSinglePanel: function(xml) {
		//stored:
		var pFac = this;
		var id = xml.getAttribute("id");
		//
		//create the actual panel and add it to our panel array:
		// --does not have an element yet:
		this.addPanel(id, xml);
		this.safePanelIds.push(id);  // store this ID immediately in our document-order list of panels:
		var panel = this.getPanel(id);

		//
		// create the element, and attach it to the parent panel if one exists:
		//
		var parent = xml.parentNode;
		if(parent.nodeName == "panel") {
			//CVPortal.debug("Loaded nested panel " + id + ", child of " + parent.getAttribute("id"));
			panel.setParent(xml.parentNode.getAttribute("id"));
			// insert into XHTML document:
			$(pFac.getPanel(parent.getAttribute("id")).getElement()).append('<div id="' + xml.getAttribute("id") + '"></div>');
		} else {
			// if there is no parent, directly insert into XHTML body element:
			$("body").append('<div id="' + xml.getAttribute("id") + '"></div>');
			panel.setParent(null); // set our parent to null as we are a top level element
		}

		//locate our newly created element and load it:
		var elem = panel.setElement();

		if(panel !== null) {
			// Process the panel "type", a major attribute that describes how it will be used:
			// -> "shared" -- a panel that will contain multiple <div>s of content, written by multiple components.  each component is instructed to create its own slice
			// -> "container" -- a panel that is meant SOLEY to hold other containers, it will not load a template and will refuse requests to setContent( ) as this would
			// 		destroy important panels inside the container:
			panel.panelType = xml.getAttribute("type");
			CVPortal.info("    {Panels} panel " + id + " is a " + panel.panelType + " panel");

			// set our class name:
			elem.className = xml.getAttribute("class");
			panel.className = elem.className;

			// HEIGHT AND WIDTH:
			// 1) set panel.height and panel.width so that after all panels have been set,
			// we can figure out our Varied H / W (applyVariedDimensions)
			$(xml).children("width").each(function() { panel.width = CVPortal.getNodeText(this);    });
			$(xml).children("height").each(function() { panel.height = CVPortal.getNodeText(this);	});

			// 2) LOAD OUR TEMPLATE
			//   Attempt to load a template if one is recorded:
			$(xml).children("template:first").each(function() {
				if(panel.panelType == "shared") {
					panel.loadTmpl(CVPortal.getNodeText(this), false, "self");
				} else {
					panel.loadTmpl(CVPortal.getNodeText(this), false);
				}
			});
			
			panel.needs_relative_adjustment = $(xml).attr("needs_relative_adjustment");		// should this panel recieve relative T / L
			panel.needs_negative_relative_adjustment = $(xml).attr("needs_negative_relative_adjustment");		// should this panel recieve relative T / L
		} else {
			CVPortal.error("Panel Factory failed to getPanel(" + id + ") directly after creating it.");
		}
	},
	
	// *******************************************************
	//  Initiate Resize Handles and resizing panels:
	// *******************************************************
	initResize: function() {
		var pFac = this;
		CVPortal.debug(" {Panels} Panel factory initiating resizing panels:");

		$("relation", pFac.xml).each(function() {
			var pXML = this;
			var rTarget = pXML.getAttribute("target");
			var pId = this.parentNode.getAttribute("id");
			var orient = pXML.getAttribute("orient");
			//grab the actual panels:
			var primary = pFac.getPanel(pId);
			var secondary = pFac.getPanel(rTarget);
			// starting H / W:
			var startWidth = primary.width;
			var startHeight = primary.height;						
			// track our parent panel:
			var parentPanel = CVPortal.panelFactory().getPanel(primary.getParent());
			
			// Create the OPTIONS object:
			var options = {
				side1: primary.id,
				side2: secondary.id,
				outline: true,
				resizeToWidth: true,
				type: orient
			};

			pFac.createSplitter(primary,secondary,orient);

			pFac.resizeRecords[primary.id] = pFac.createResizeRecord(primary, secondary, orient);
			if(pFac.resizeRecords[primary.id].altcollapse == 1) {
				pFac.collapsePanel(primary.id, true);
			}
			//since graphics panel is hidden to display front matter, remove splitter on first load
			if ($("#graphicsPanel").hasClass("resizable-v") || $("#graphicsPanel").hasClass("resizable-h")) {
				$("#graphicsPanel").resizable("destroy");
				$("#graphicsPanel").removeClass("resizable-v resizable-h panelCell");
			}
			//since graphics panel is hidden to display front matter, remove splitter on first load
			if ($("#contentPanel").hasClass("resizable-v") || $("#contentPanel").hasClass("resizable-h")) {
				$("#contentPanel").resizable("destroy");
				$("#contentPanel").removeClass("contentPanel resizable-v ui-resizable");
			}

		});
		//makes sure the TOC is sized properly on initial load, since initResize runs at the end of the layout-setup process
		//also, since initResize runs in the tearoff where only some JS is loaded, check for cvSearch before running it
		if (CVPortal.components.cvSearch) CVPortal.components["cvSearch"].adjustTabletSearchPanels();
	},
	
	createSplitter:function(primary, secondary, orient) {
		var pFac = this;
		var parentPanel = CVPortal.panelFactory().getPanel(primary.getParent());

		if(orient == "v") {
			$(primary.getElement()).height($(parentPanel.getElement()).height());
			$(primary.getElement()).addClass("resizable-v");
			$(secondary.getElement()).height($(parentPanel.getElement()).height());
			//create jQuery "resizable" object, bind splitter-style behavior to it
			$(primary.getElement()).resizable({
				autoHide: false,
				handles: 'e',
				containment: "parent",
				resize: function(e, ui) {
					var parent = ui.element.parent();
					var remainingSpace = parent.width() - ui.element.outerWidth();
					var divTwo = ui.element.next();
					var divTwoWidth = (remainingSpace - (divTwo.outerWidth() - divTwo.width()))/parent.width()*99.5+"%";
					divTwo.width(divTwoWidth);
					if ($("#contentPanel").hasClass("resizable-v")) {
						$("#contentPanel").width($("#mainContainer").width() - $($("#graphicsPanel")).width());
					} else if ($("#graphicsPanel").hasClass("resizable-v")) {
						$("#contentPanel").width($("#mainContainer").width() - $($("#graphicsPanel")).width());
					} else if ($("#graphicsPanel").hasClass("resizable-h")) {
						$("#contentPanel").height($("#mainContainer").height() - $($("#graphicsPanel")).height() - $("#dmSecurityBanner").height() - $("#dmReviewComments").height()); // LAM amended for DM sec. and comments
					} else if ($("#graphicsPanel").height() == 0 || $("#graphicsPanel").width() == 0) {
						$("#contentPanel").width($("#mainContainer").width());
						$("#contentPanel").height($("#mainContainer").height() - $("#dmSecurityBanner").height() - $("#dmReviewComments").height()); // LAM amended for DM sec. and comments
					}
					$("#dmSecurityBanner").width($("#mainContainer").width()); // LAM amended for DM sec. and comments
					$("#dmReviewComments").width($("#mainContainer").width()); // LAM amended for DM sec. and comments
				},
				stop: function(e, ui) {
					var parent = ui.element.parent();
					var divTwo = ui.element.next();
					ui.element.css({
					//width: ui.element.width()/parent.width()*100+"%",
					width: ui.element.width(),
					});
					divTwo.width(divTwo.width());
					if ($("#graphicsPanel").hasClass("resizable-v")) {
						$("#contentPanel").height($("#mainContainer").height() - $("#dmSecurityBanner").height() - $("#dmReviewComments").height()); // LAM amended for DM sec. and comments
						$("#graphicsPanel").height($("#mainContainer").height() - $("#dmSecurityBanner").height() - $("#dmReviewComments").height()); // LAM amended for DM sec. and comments
						$("#contentPanel").width($("#mainContainer").width() - $($("#graphicsPanel")).width());
					} else if ($("#graphicsPanel").hasClass("resizable-h")) {
						$("#contentPanel").width($("#mainContainer").width());
						$("#graphicsPanel").width($("#mainContainer").width());
						$("#contentPanel").height($("#mainContainer").height() - $($("#graphicsPanel")).height() - $("#dmSecurityBanner").height() - $("#dmReviewComments").height()); // LAM amended for DM sec. and comments
					} else if ($("#graphicsPanel").height() == 0 || $("#graphicsPanel").width() == 0) {
						$("#contentPanel").width($("#mainContainer").width());
						$("#contentPanel").height($("#mainContainer").height() - $("#dmSecurityBanner").height() - $("#dmReviewComments").height()); // LAM amended for DM sec. and comments
					}
					$("#dmSecurityBanner").width($("#mainContainer").width()); // LAM amended for DM sec. and comments
					$("#dmReviewComments").width($("#mainContainer").width()); // LAM amended for DM sec. and comments
					CVPortal.components.cvMedia.resizeControlBar();
					
					//since we can't attach resize events to individual elements, and we don't want to explicitly name every single thing that needs to adjust to panel resizing...
					//we fire a window-resize event to trick those things into thinking we resized the window!
					var resizeEvent;
					if (typeof window.Event == "function"){	//modern way of creating events: Edge, Firefox, Chrome only
						resizeEvent = new UIEvent('resize');
					} else { 		//deprecated way of creating events: Internet Explorer only
						resizeEvent = document.createEvent("UIEvent");
						resizeEvent.initUIEvent('resize', true, true, window, 1);
					}
					window.dispatchEvent(resizeEvent);
				}
			});
		}
		if(orient == "h") {
			$(primary.getElement()).width($(parentPanel.getElement()).width());
			$(primary.getElement()).addClass("resizable-h");
			$(secondary.getElement()).width($(parentPanel.getElement()).width());
			if (secondary.height == "*" && $(primary.getElement()).height() == 0) {
				$(secondary.getElement()).height($(parentPanel.getElement()).height() - $(primary.getElement()).height());
			}
			//create jQuery "resizable" object, bind splitter-style behavior to it
			$(primary.getElement()).resizable({
				autoHide: false,
				handles: 's',
				containment: "parent",
				resize: function(e, ui) {
					var parent = ui.element.parent();
					var remainingSpace = parent.height() - ui.element.outerHeight();
					var divTwo = ui.element.next();
					var divTwoHeight = (remainingSpace - (divTwo.outerHeight() - divTwo.height()))/parent.height()*100+"%";
					divTwo.height(divTwoHeight);
				},
				stop: function(e, ui) {
					var parent = ui.element.parent();
					ui.element.css({
					//height: ui.element.height()/parent.height()*100+"%",
					height: ui.element.height(),
					});
					if ($("#graphicsPanel").hasClass("resizable-v")) {
						$("#contentPanel").height($("#mainContainer").height() - $("#dmSecurityBanner").height() - $("#dmReviewComments").height()); // LAM amended for DM sec. and comments
						$("#graphicsPanel").height($("#mainContainer").height() - $("#dmSecurityBanner").height() - $("#dmReviewComments").height()); // LAM amended for DM sec. and comments
						$("#contentPanel").width($("#mainContainer").width() - $($("#graphicsPanel")).width());
					} else if ($("#graphicsPanel").hasClass("resizable-h")) {
						$("#contentPanel").width($("#mainContainer").width());
						$("#graphicsPanel").width($("#mainContainer").width());
						$("#contentPanel").height($("#mainContainer").height() - $($("#graphicsPanel")).height() - $("#dmSecurityBanner").height() - $("#dmReviewComments").height()); // LAM amended for DM sec. and comments
					} else if ($("#graphicsPanel").height() == 0 || $("#graphicsPanel").width() == 0) {
						$("#contentPanel").width($("#mainContainer").width());
						$("#contentPanel").height($("#mainContainer").height() - $("#dmSecurityBanner").height() - $("#dmReviewComments").height()); // LAM amended for DM sec. and comments
					}
					$("#dmSecurityBanner").width($("#mainContainer").width()); // LAM amended for DM sec. and comments
					$("#dmReviewComments").width($("#mainContainer").width()); // LAM amended for DM sec. and comments
					CVPortal.components.cvMedia.resizeControlBar();

					//since we can't attach resize events to individual elements, and we don't want to explicitly name every single thing that needs to adjust to panel resizing...
					//we fire a window-resize event to trick those things into thinking we resized the window!
					var resizeEvent;
					if (typeof window.Event == "function"){	//modern way of creating events: Edge, Firefox, Chrome only
						resizeEvent = new UIEvent('resize');
					}
					else { 		//deprecated way of creating events: Internet Explorer only
						resizeEvent = document.createEvent("UIEvent");
						resizeEvent.initUIEvent('resize', true, true, window, 1);
					}
					window.dispatchEvent(resizeEvent);
				}
			});
		}
		if (CVPortal.getIsTablet() == false) $(primary.getElement()).resizable( "option", "autoHide", true );
	},

	expandPanel:function(id, resetIfZero) {
		var pFac = this;
		var primary = this.getPanel(id);
		var secondary;
		if 	 (primary.relation){ 
			secondary = this.getPanel(primary.relation.target);
		} else{ 
			primary = this.getPanel(this.getPanel(primary.parent).element.firstChild.id);
			secondary = this.getPanel(id);
		}

		//ensure that the primary and secondary panels are both visible:
		if($(primary.element).css("display") == "none") { $(primary.element).css("display", "block"); }
		if($(secondary.element).css("display") == "none") { $(secondary.element).css("display", "block"); }		
		
		
		// ***************************************************
		// retrieve Resize Record
		var rr = this.getResizeRecord(primary.id);
		$(rr.parentPanel.getElement()).children(".hsplitbar, .vsplitbar").removeClass("resize_disabled");
		if(rr.orient == "v") {
			if(resetIfZero && primary.width == 0) {   // Some Panels Start as 0... if primWidth == 0, set to half parent width
				rr.primWidth = parseInt(rr.parentPanel.getPanelWidth(), 10) / 2;
				rr.secWidth = parseInt(rr.parentPanel.getPanelWidth(), 10) / 2;
			}
			primary.collapsed = 0;
			$(rr.primary.getElement()).width(rr.primWidth);
			$(rr.secondary.getElement()).width(rr.secWidth);
		} else {
			if(resetIfZero && rr.primary.height == 0 && rr.prevReset != 1)  {  // Some Panels Start as 0... if primHeight == 0, set to half parent height
				rr.primHeight = parseInt(rr.parentPanel.getPanelHeight(), 10) / 2;
				rr.secHeight = parseInt(rr.parentPanel.getPanelHeight(), 10) / 2;				
				rr.prevReset = 1;
			}
			primary.collapsed = 0;
			$(rr.primary.getElement()).height(rr.primHeight);
			$(rr.secondary.getElement()).height(rr.secHeight);
		}
		pFac.createSplitter(primary,secondary,rr.orient);
		var parentPanel = CVPortal.panelFactory().getPanel(primary.getParent());
		
		//the border-box attribute on the TOC panel throws off jquery width() calculations, which can lead to incorrect panel sizes in some cases
		//this code checks for those incorrect panel sizes and corrects them by recalculating sizes with the padding width added
		if(id == "tocPanel" && $("#tocPanel").hasClass("resizable-v")) {
			if ($("#tocPanel").outerWidth() + $(secondary.getElement()).width() != $(parentPanel.getElement()).width()) {
				$(secondary.getElement()).width($(parentPanel.getElement()).width()-$("#tocPanel").outerWidth());
			}
		}
		if ($("#contentPanel").hasClass("resizable-v")) {
			$("#contentPanel").height($("#mainContainer").height() - $("#dmSecurityBanner").height() - $("#dmReviewComments").height()); // LAM amended for DM sec. and comments
			$("#graphicsPanel").height($("#mainContainer").height() - $("#dmSecurityBanner").height() - $("#dmReviewComments").height()); // LAM amended for DM sec. and comments
			$("#contentPanel").width($("#mainContainer").width() - $($("#graphicsPanel")).width());
		} else if ($("#graphicsPanel").hasClass("resizable-v")) {
			$("#contentPanel").height($("#mainContainer").height() - $("#dmSecurityBanner").height() - $("#dmReviewComments").height()); // LAM amended for DM sec. and comments
			$("#graphicsPanel").height($("#mainContainer").height() - $("#dmSecurityBanner").height() - $("#dmReviewComments").height()); // LAM amended for DM sec. and comments
			$("#contentPanel").width($("#mainContainer").width() - $($("#graphicsPanel")).width());
		} else if ($("#graphicsPanel").hasClass("resizable-h")) {
			$("#contentPanel").width($("#mainContainer").width());
			$("#graphicsPanel").width($("#mainContainer").width());
			$("#contentPanel").height($("#mainContainer").height() - $($("#graphicsPanel")).height() - $("#dmSecurityBanner").height() - $("#dmReviewComments").height()); // LAM amended for DM sec. and comments
		} else if ($("#graphicsPanel").height() == 0 || $("#graphicsPanel").width() == 0) {
			$("#contentPanel").width($("#mainContainer").width());
			$("#contentPanel").height($("#mainContainer").height() - $("#dmSecurityBanner").height() - $("#dmReviewComments").height()); // LAM amended for DM sec. and comments
		}
		$("#dmSecurityBanner").width($("#mainContainer").width()); // LAM amended for DM sec. and comments
		$("#dmReviewComments").width($("#mainContainer").width()); // LAM amended for DM sec. and comments
		CVPortal.components.cvMedia.resizeControlBar();
		//since we can't attach resize events to individual elements, and we don't want to explicitly name every single thing that needs to adjust to panel resizing...
		//we fire a window-resize event to trick those things into thinking we resized the window!
		var resizeEvent;
		if (typeof window.Event == "function"){	//modern way of creating events: Edge, Firefox, Chrome only
			resizeEvent = new UIEvent('resize');
		} else { 		//deprecated way of creating events: Internet Explorer only
			resizeEvent = document.createEvent("UIEvent");
			resizeEvent.initUIEvent('resize', true, true, window, 1);
		}
		window.dispatchEvent(resizeEvent);
	},
	
	collapsePanel: function(id, first) {
		// get the two panels:
		var primary = this.getPanel(id);
		var parentPanel = CVPortal.panelFactory().getPanel(primary.getParent());
		if 	 (primary.relation){ 
			secondary = this.getPanel(primary.relation.target);
		} else{ 
			secondary = this.getPanel(this.getPanel(primary.parent).element.firstChild.id);
			primary = this.getPanel(id);
		}
			
		// ***************************************************
		// create a resize record to remember the SIZES:
		var rr = this.updateResizeRecord(primary, secondary);
		var splitterElement;
		if ($(primary.getElement()).hasClass("resizable-v") || $(primary.getElement()).hasClass("resizable-h")) {
			splitterElement = primary;
		} else if ($(secondary.getElement()).hasClass("resizable-v") || $(secondary.getElement()).hasClass("resizable-h")) {
			splitterElement = secondary;
		}
		$(splitterElement.getElement()).resizable("destroy");
		$(splitterElement.getElement()).removeClass("resizable-v resizable-h panelCell");
		if(rr.altcollapse == 1) {
			this.alternativeCollapsePanel(id, first);
		} else {			
			if (rr.orient == "v") {
				$(primary.getElement()).width(0);
				$(primary.getElement()).hide();
				if (primary.relation) $(secondary.getElement()).width($(rr.parentPanel.getElement()).width());
			} else {
				$(primary.getElement()).height(0);
				if (primary.relation) $(secondary.getElement()).height($(rr.parentPanel.getElement()).height());
			}
			primary.collapsed = 1;
			$(rr.parentPanel.getElement()).children(".hsplitbar, .vsplitbar").addClass("resize_disabled");
		}
		if ($("#graphicsPanel").hasClass("resizable-v") || $("#contentPanel").hasClass("resizable-v")) {
			$("#contentPanel").height($("#mainContainer").height() - $("#dmSecurityBanner").height() - $("#dmReviewComments").height()); // LAM amended for DM sec. and comments
			$("#graphicsPanel").height($("#mainContainer").height() - $("#dmSecurityBanner").height() - $("#dmReviewComments").height()); // LAM amended for DM sec. and comments
			$("#contentPanel").width($("#mainContainer").width() - $($("#graphicsPanel")).width());
		} else if ($("#graphicsPanel").hasClass("resizable-h")  || $("#contentPanel").hasClass("resizable-h")) {
			$("#contentPanel").width($("#mainContainer").width());
			$("#graphicsPanel").width($("#mainContainer").width());
			$("#contentPanel").height($("#mainContainer").height() - $($("#graphicsPanel")).height() - $("#dmSecurityBanner").height() - $("#dmReviewComments").height()); // LAM amended for DM sec. and comments
		} else if ($("#graphicsPanel").height() == 0 || $("#graphicsPanel").width() == 0) {
			$("#contentPanel").width($("#mainContainer").width());
			$("#contentPanel").height($("#mainContainer").height() - $("#dmSecurityBanner").height() - $("#dmReviewComments").height()); // LAM amended for DM sec. and comments
		}
		$("#dmSecurityBanner").width($("#mainContainer").width()); // LAM amended for DM sec. and comments
		$("#dmReviewComments").width($("#mainContainer").width()); // LAM amended for DM sec. and comments
		CVPortal.components.cvMedia.resizeControlBar();
	},
	
	alternativeCollapsePanel: function(id, first) {
		// get the two panels:
		var primary = this.getPanel(id);
		var secondary = this.getPanel(primary.relation.target);
		// ***************************************************
		// create a resize record to remember the SIZES:
		var rr = this.updateResizeRecord(primary, secondary);	

		// ALTERNATIVE COLLAPSE ...
		var newsize = 0;
		if(rr.orient == "v") {
			newsize = rr.parentPanel.getPanelWidth();
		} else {
			newsize = rr.parentPanel.getPanelHeight();
		}
		$(rr.parentPanel.getElement()).trigger("resize", [newsize, 0]);
		
		// ============================
		// IE specific help, the FIRST time through only for ALTCOLLAPSE panels
		if(first && CVPortal.getBrowserType() == "IE") {
			rr.secondary.setPanelWidth(newsize);
			rr.primary.setPanelWidth("0px");
		}
			
		primary.collapsed = 1;
		$(rr.parentPanel.getElement()).children(".hsplitbar, .vsplitbar").addClass("resize_disabled");
	},
	
	tabletResourcePanelToggle: function(operation) {
		if(operation == "show") {
			if ($("#rightPanel").is(":visible") == true) return;
			$("#rightPanel").height($("#body_container").height());
			$("#rightPanel").width($("#body_container").width());
			
			/* hide the media component if it is currently open because some media types would display in front of the modal rather than behind it
			but don't apply this functionality for svg graphic suspend and resume session, nav with Back/Forward svg library give errors if the graphic wasn't fully loaded
			*/
			if(CVPortal.components.cvMedia && CVPortal.components.cvMedia.currentType !== "unknown" && CVPortal.components.cvMedia.currentType !== "svg") {
				this.hidMedia = CVPortal.components["cvMedia"].hideMediaPanel();
			}
			// if there is a home page that is SWF, hide it for the moment...
			if(CVPortal.components.cvDocHandler) {
				CVPortal.components.cvDocHandler.docPanel.getElement().style.overflow = "hidden";
				if(CVPortal.components.cvDocHandler.inHome == true && CVPortal.components.cvDocHandler.homeType == "SWF") {
					this.hidHome = true;
					CVPortal.components.cvDocHandler.docPanel.getElement().style.display = "none";
				}
			}
			
			$("#rightPanel").show();
			//$("#body_container").width($("#body_container").width() - 300);
			//$("#body_container").trigger("resize");
		} else if(operation == "hide") {
			if ($("#rightPanel").is(":visible") == false) return;
			$("#rightPanel").hide();
			//restore media:
			if(this.hidMedia == 1) {
				this.hidMedia = 0;
				if(CVPortal.components.cvMedia && document.getElementById("graphic_content").children.length && CVPortal.components.cvMedia.currentType !== "unknown" && CVPortal.components.cvMedia.currentType !== "svg") {
					CVPortal.components["cvMedia"].showMediaPanel();
				}
			}

			if(CVPortal.components.cvDocHandler) {
				// CVPortal.components.cvDocHandler.docPanel.getElement().style.overflow = "auto";
				if(this.hidHome == true) {
					this.hidHome = false;
					CVPortal.components.cvDocHandler.docPanel.getElement().style.display = "";
				}

			}
			//$("#body_container").width($("#body_container").width() + 300);
			//$("#body_container").trigger("resize");
		} else {
			if ($("#rightPanel").is(":visible") == false) {
				$("#rightPanel").height($("#body_container").height());
				$("#rightPanel").width($("#body_container").width());
				
				// hide the media component if it is currently open:
				if(CVPortal.components.cvMedia) {
					this.hidMedia = CVPortal.components["cvMedia"].hideMediaPanel();
				}
				// if there is a home page that is SWF, hide it for the moment...
				if(CVPortal.components.cvDocHandler) {
					CVPortal.components.cvDocHandler.docPanel.getElement().style.overflow = "hidden";
					if(CVPortal.components.cvDocHandler.inHome == true && CVPortal.components.cvDocHandler.homeType == "SWF") {
						this.hidHome = true;
						CVPortal.components.cvDocHandler.docPanel.getElement().style.display = "none";
					}
				}
				$("#rightPanel").show();
				//$("#body_container").width($("#body_container").width() - 300);
				//$("#body_container").trigger("resize");
			} else {
				$("#rightPanel").hide();
				//restore media:
				if(this.hidMedia == 1) {
					this.hidMedia = 0;
					if(CVPortal.components.cvMedia) {
						CVPortal.components["cvMedia"].showMediaPanel();
					}
				}

				if(CVPortal.components.cvDocHandler) {
					if(this.hidHome == true) {
						this.hidHome = false;
						CVPortal.components.cvDocHandler.docPanel.getElement().style.display = "";
					}

				}
				//$("#body_container").width($("#body_container").width() + 300);
				//$("#body_container").trigger("resize");
			}
		}
	},
	
	tabletResourcePanelFixer: function() {
		//fixes various problems the panel for the new resource manager encounters when resizing or reorienting
		if ($("#rightPanel").is(":visible") == true) {
			//using setTimeout ensures that layoutFix runs last, after all resize code and HTML/CSS processing and repainting is done
			window.setTimeout(layoutFix(), 205);
		}
		if ($("#rightPanel").is(":visible") == false && CVPortal.getBrowserPlatform() == "IPAD") {
			$("#rightTitle").empty();$("[cvResourceAction='1']").hide();$("#rightButtons").empty();
			$("#rightDialog").empty();
			$("#rightList").empty();
			//window.setTimeout(layoutFix(), 205);
		}
		function layoutFix() {
			CVPortal.panelFactory().tabletResourcePanelToggle();
			CVPortal.panelFactory().tabletResourcePanelToggle();
		}
	},
	
	tabletResourcePanelLayout: function(mode) {
		//hides or shows the resource manager layout on the resource manager panel, allowing things that don't fit in the resource manager framework to be displayed there
		
		//make sure the 5.6 resource manager exists, and skip this function if it doesn't!
		if ($("#rightPanel").length == 0) return;
		
		if (mode == "hide") {
			$("#rightTools").hide();
			$("#rightBody").hide();
			$("#rightHidden").show();
		}
		if (mode == "show") {
			$("#rightTools").show();
			$("#rightBody").show();
			$("#rightHidden").hide();
			$("#rightHidden").empty();
		}		
	},
		
	
	// ***************************************************************
	//		RESIZE RECORD HANDLING:
	// ***************************************************************
	getResizeRecord: function(id) {
		var rr = this.resizeRecords[id];
		if(rr == null) { return {}; }
		return rr;
	},
	getPanelOrient: function(id) {
		// get the two panels:
		var primary = this.getPanel(id);
		var secondary = this.getPanel(primary.relation.target);
		// ***************************************************
		// create a resize record to remember the SIZES:
		var rr = this.getResizeRecord(primary.id);
		return(rr.orient);
	},
	updateResizeRecord: function(primary, secondary, orient) {
		var rr = this.resizeRecords[primary.id];
		var primaryRecord = primary;
		var secondaryRecord = secondary;
		if ($.isEmptyObject(rr)) {
			rr = this.resizeRecords[secondary.id];
			secondaryRecord = primary;
			primaryRecord = secondary;
		}

		// update orient:
		if(orient) { rr.orient = orient; }
		// update PANEL DIMENSIONS:
		rr.primHeight = primaryRecord.getPanelHeight();	// PRIMARY
		rr.primWidth = primaryRecord.getPanelWidth();
		rr.secHeight = secondaryRecord.getPanelHeight();	// SECONDARY
		rr.secWidth = secondaryRecord.getPanelWidth();
		return rr;
	},

	createResizeRecord: function(primary, secondary, orient) {
		var rr = {};
		// PANEL POINTERS:
		rr.primary = primary;
		rr.altcollapse = primary.relation.altcollapse;
		rr.secondary = secondary;
		rr.parentPanel = CVPortal.panelFactory().getPanel(primary.getParent());	// track our parent panel:
		// set RESIZE flags:
		primary.resized = true;
		//secondary.resized = true;
		// PANEL DIMENSIONS:
		rr.primHeight = primary.getPanelHeight();		// PRIMARY
		rr.primWidth = primary.getPanelWidth();
		rr.secWidth = secondary.getPanelWidth();		// SECONDARY
		rr.secHeight = secondary.getPanelHeight();
		// remember our orientation
		rr.orient = orient;	
		return rr;
	},
	
	flipPanels: function(id) {
		// get the two panels:
		var panel_id;
		if (id) {
			// do nothing
			panel_id = id;
		} else {
			panel_id = CVPortal.components.cvMedia.mediaPanel.id;
		}
		var primary = this.getPanel(panel_id);
		var secondary;;
		if (primary.relation){ 
			secondary = this.getPanel(primary.relation.target);
		} else { 
			primary = this.getPanel(this.getPanel(primary.parent).element.firstChild.id);
			secondary = this.getPanel(panel_id);
		}
		var parentPanel = CVPortal.panelFactory().getPanel(primary.getParent());
		// ***************************************************
		// create a resize record to remember the SIZES:
		var rr = this.getResizeRecord(primary.id);		

		// Unbind RESIZE and REMOVE either splitbar CHILDREN
		$(primary.getElement()).resizable("destroy");
		$(primary.getElement()).removeClass("resizable-v resizable-h panelCell");
	
		var orient = "v";
		if(rr.orient == "v") { orient = "h"; }
		rr.orient = orient; // set the Resize Record to remember the ORIENT
		
		// Create the NEW OPTIONS object:
		var options = {
			side2: secondary.id,
			side1: primary.id,
			outline: true,
			resizeToWidth: true,
			type: orient
		};
			
		if(orient == "v") {
			$(primary.getElement()).width($(parentPanel.getElement()).width()/2);
			$(secondary.getElement()).width($(parentPanel.getElement()).width()/2);
		}
		if(orient == "h") {
			$(primary.getElement()).height($(parentPanel.getElement()).height()/2);
			$(secondary.getElement()).height($(parentPanel.getElement()).height()/2);
		}
		
		this.createSplitter(primary,secondary,orient);
		if(orient == "v"){ 
			$(primary.getElement()).css("top", "0px");
			$(secondary.getElement()).css("top", "0px");
		} else {
			$(primary.getElement()).css("left", "0px");
			$(secondary.getElement()).css("left", "0px");				
		}
		CVPortal.components.cvMedia.resizeControlBar();
		//  trigger resize to culculate wcn msg position is WCN_POPUP is enabled
		if (CVPortal.metaFactory().get("META_WCN_POPUP") == 0) {
			$(CVPortal.components.cvDocHandler.docPanel.getElement(CVPortal.components.cvDocHandler.id)).trigger("resize-panel");
		}
		this.resizeIpcTable(); // LAM
	},
	
	// LAM Added for scrolling IPC table
	resizeIpcTable: function() {
		var tbody = document.getElementById("parts-list-body");
		if (tbody) {
			var ishorizontal = true;
			var bulk = 120; // Estimate as how much the IDstatus text takes (2020-09-03 Changed from 270 to 120 because of folding metadata section)
			if      ($("#graphicsPanel").hasClass("resizable-v")) ishorizontal = true; 
			else if ($("#graphicsPanel").hasClass("resizable-h")) ishorizontal = false; 
			if (ishorizontal) {
				// tbody.style.height = '550px';
				tbody.style.height = ($("#mainContainer").height() - $("#dmSecurityBanner").height() - bulk) + 'px';
			} else {
				// tbody.style.height = '250px';
				tbody.style.height = ($("#mainContainer").height() - ($("#graphicsPanel").height() + $("#dmSecurityBanner").height()) - bulk) + 'px';
			}
		}
	},
	
	//
	//  ASSIGNING VARIED HEIGHTS and WIDTHS to elements with * as h / w:
	//
	applyVariedDimensions: function(hideBanners) {
		if(!this.saveBannersState) { 
			this.saveBannersState = hideBanners;
		}
		// alert("applyVariedDimensions run");
		var pFac = this;
		CVPortal.debug(" {Panels} Panel factory assigning values to all (*) widths and heights");
		// WINDOWS WIDTH and HEIGHT and OFFSET for RELATIVE elements
		pFac.refreshClientSize(); // make sure we get this every time		
		var calcH = pFac.height;
		var calcW = pFac.width;
		var calcTop = 0;
		var calcLeft = 0;
		
		CVPortal.debug(" {Panels} Starting Varied H / W (" + calcH + " / " + calcW + ")");
		//alert("Panel Staring Variied H: " + calcH + " W: " + calcW );
		
		var varied = new Array(); // keep a list of the (*) H/W panels
		// ******************************************************************************************************************
		//  PASS 1 (of 2) on the panels, first to calculate all the H/W and T/L
		// 	-second pass sets all the H/W and T/L
		for(var i = 0; i < pFac.safePanelIds.length; i++) { //in pFac.panels) {
			// NOTE: Only thinking of one level deep here... no consideration for nested * panels...
			var p = pFac.getPanel(pFac.safePanelIds[i]);

			if(p.width != "*" && p.width != "na") { // if no width will be set (na) or the width will be set in Pass 2 (*)...
				if(p.resized != true) {		// if the panel has never been resized, then:
					p.setPanelWidth(null);  // use the internal width value (from panels.xml)
				}
				if(p.width != "100%" && p.width != 0) { //  p.getParent() == null -- PROCESS CHILDREN TOO
					CVPortal.debug(" {Panels} W: Panel " + p.id + " is modifying the varied width: " + parseInt(p.getPanelWidth(), 10));
					calcW -= parseInt(p.getPanelWidth(), 10);		// mark this as a varied width
					calcLeft += parseInt(p.getPanelWidth(), 10);	// record this for left-bearing offsets (UNUSED)
				}
			}
			if(p.height != "*" && p.height != "na") { // if no height will be set (na) or the height will be set in Pass 2 (*)...
				if(p.resized != true) {			// if the panel has never been resized, then :
					p.setPanelHeight(null); 	// use the internal height value 
				}
				if(p.height != "100%" && p.height != 0) { // && p.getParent() === null -- PROCESS CHILDREN TOO) {
					CVPortal.debug(" {Panels} H: Panel " + p.id + " is modifying the varied height: " + parseInt(p.getPanelHeight(), 10));	

					if(this.saveBannersState && pFac.xml.getAttribute("id") === "tearOff" && p.id !== "publicationSecBanner"){
						calcH -= parseInt(p.getPanelHeight(), 10);
					} else if(this.saveBannersState && CVPortal.components.cvDocHandler && CVPortal.components.cvDocHandler.current && Object.keys(CVPortal.components.cvDocHandler.current).length !== 0) {
						calcH -= parseInt(p.getPanelHeight(), 10); //set height if DM and publication security banners visible
					} else if(this.saveBannersState && p.id !== "dmSecurityBanner") {
						calcH -= parseInt(p.getPanelHeight(), 10); //set height only if publication security banner visible
					} else if(p.id !== "dmSecurityBanner" && p.id !== "publicationSecBanner") {
						calcH -= parseInt(p.getPanelHeight(), 10); //set height if security banner disabled
					}

					// calculate the "TOP" for offset elements:
					calcTop += parseInt(p.getPanelHeight(), 10);
					//if(CVPortal.getBrowserType() == "MOZ" || CVPortal.getBrowserType() == "WEBKIT") { 
					if(CVPortal.getBrowserType() == "MOZ") { 
						calcTop += parseInt($(p.getElement()).css("margin-top"), 10); 
						calcTop += parseInt($(p.getElement()).css("margin-bottom"), 10); 
						calcTop += parseInt($(p.getElement()).css("margin-bottom"), 10); 
					}
				}
			} else {
				p.calcTop = calcTop;
			}
			// store each panels offsets:
			p.calc_offSetTop = calcTop;
			p.calc_offSetLeft = calcLeft;
			//CVPortal.debug(" {panels} Left " + p.calc_offsetLeft + " TOP: " + p.calc_offSetTop);
		}
		// ******************************************************************************************************************
		// PASS 2, set * W / H
		CVPortal.debug(" {Panels} Calcuated Varied H / W (" + calcH + " / " + calcW + ")");
		for(var i = 0; i < pFac.safePanelIds.length; i++) { //in pFac.panels) {
			// NOTE: Only thinking of one level deep here... no consideration for nested * panels...
			var panel = pFac.getPanel(pFac.safePanelIds[i]);
			CVPortal.debug(" {Panels} panel.id " + panel.id + " width is " + panel.width);
			
			// If the object used Varied Height, size it to the new calculated varied H / W
			if(panel.height == "*" && panel.resized != true) { // if this has NOT been resized...
				if(panel.panelType == "shared") {
					var ht = parseInt(calcH)/2;
					CVPortal.debug(" {Panels} Setting Height to HALF of * Panel " + panel.id + " to " + ht);
					calcH = panel.setPanelHeight(ht + "px");
					
				} else {
					CVPortal.debug(" {Panels} Setting Height of * Panel " + panel.id + " to " + calcH);
					calcH = panel.setPanelHeight(calcH + "px");
					//alert("GOING TO SET HEIGHT: " + pFac.safePanelIds[i] + " with height: " + calcH + " results in : " + panel.getPanelHeight());
				}
			} 
			if(panel.width == "*" && panel.resized != true) { // if this has NOT been resized...
				CVPortal.debug(" {Panels} panel.panelType " + panel.panelType );
				if(panel.panelType == "shared") {
					var wd = parseInt(calcW)/2;
					CVPortal.debug(" {Panels} Setting Width to HALF of * Panel " + panel.id + " to " + wd);
					calcW = panel.setPanelWidth(wd + "px");

				} else {
					CVPortal.debug(" {Panels} Setting Width of * Panel " + panel.id + " to " + calcW);
					calcW = panel.setPanelWidth(calcW + "px");
				}
				//alert("GOING TO SET WIDTH: " + pFac.safePanelIds[i] + " with width: " + calcW + " results in : " + panel.getPanelWidth());
			}	

			// *********************************************************************
			// does this panel need relative TOP adjustmnet? (FF ONLY)
			// if(panel.needs_relative_adjustment == "true" && (CVPortal.getBrowserType() == "MOZ" || CVPortal.getBrowserType() == "WEBKIT")) {
			if(panel.needs_relative_adjustment == "true" && (CVPortal.getBrowserType() == "MOZ")) {
				$(panel.getElement()).css("top", (panel.calc_offSetTop+1) + "px");
			}
			// does this panel need relative TOP adjustment, NEGATIVELY (FF ONLY)
			// if(panel.needs_negative_relative_adjustment == "true" && (CVPortal.getBrowserType() == "MOZ" || CVPortal.getBrowserType() == "WEBKIT")) {
			if(panel.needs_negative_relative_adjustment == "true" && (CVPortal.getBrowserType() == "MOZ")) {
				$(panel.getElement()).css("top", "-" + (panel.calc_offSetTop+1) + "px");
			}
			
			// if this panel has given specific orders to trigger resize events (FF-only!)
			// if(panel.manual_ff_resize == true && (CVPortal.getBrowserType() == "MOZ" || CVPortal.getBrowserType() == "WEBKIT")) {
			if(panel.manual_ff_resize == true && (CVPortal.getBrowserType() == "MOZ")) {
				$(panel.getElement()).trigger("resize");
			}
		}
	},

	/*******************************
	*
	* Manipulate the Panel List:
	*
	********************************/
	addPanel: function(id, xml) {
		var element;
		$("#" + id + ":first").each(function() {
			element = this;
		});
		var p;
		if(this.panels[id]) {
			//make sure the existing control points to the proper object!
			p = this.panels[id];
			if(element) { p.setElement(element); }
		} else {
			//otherwise, create a new control:
			p = new CV_panel(element, this, xml);
			this.panels[id] = p;
			this.panels.length++;
			CVPortal.debug(" {Panels} Created new panel: " + id + ", panels array at length " + this.panels.length);
		}
	},

	//  SAFE CONTROL FUNCTIONS:
	//    - components should call these safe functions against the factory
	//    - if the CTRL exists, the factory will pass the call through
	//    - if not, then no harm is done, and no worry of expcetions.
	setContent: function(id) {
		var p = this.getPanel(id);
		if(p) { p.setContent(); }
	},

	cleanContent: function(id) {
		var p = this.getPanel(id);
		if(p) { p.clean(); }
	},

	getPanel: function(id, component) {
		if(this.panels[id]) {
			// If this is a shared panel, be sure to register the component that shares it:
			if(this.panels[id].panelType == "shared" && component) {
				this.panels[id].registerSharedComponent(component);
			}
			return this.panels[id];
		} else {
			CVPortal.warn(" {Panel} Panel Factory searched for panel " + id + " and it was not found.  Returned 'undefined'");
			return null;
		}
	},

	refreshClientSize: function() {
		// Client Size information:
		this.height = CVPortal.getClientHeight();
		this.width = CVPortal.getClientWidth();
		CVPortal.info(" {Panel} Requested: Client Size (width: " + this.width + ", height: " + this.height + ")");
		
		if(this.width < 963) {
			$('#branding').hide();
		}
		
		if(this.width >= 963) {
			$('#branding').show();
		}
		
	},

	setLanguage: function(lang) {
		// Search the Entire DOM... performance issue?
		$("*[cvResTag='1']").each(function() {
			var resName = this.getAttribute("cvResName");
			$(this).html(CVPortal.getResource(resName));
		});
	}
};


//
//
//  THE Panels it creates and controls
//
function CV_panel(element, factory, xml) {
	// Set up our metadata and pointers:
	var panel = this;
	this.element = element;
	this.factory = factory;
	this.xml = xml;
	this.parent = null;
	this.panelType = "";
	this.resizeHandler = "";

	//for shared components:
	this.sharedComps = new Object();
	this.sharedLast = "";

	// drop out for fake-stubs
	if(xml == null) { return; }
	this.id = xml.getAttribute("id");
	
	// Relations:
	panel.relations = new Array();
	$(xml).children("relation").each(function() {
		panel.relation = new Object();
		panel.relation.target = this.getAttribute("target");
		panel.relation.orient = this.getAttribute("orient");
		panel.relation.altcollapse = this.getAttribute("altcollapse");
	});

	// PROPERTIES:
	// create properteries array:
	this.props = new Object();
	$("properties > item", xml).each(function() {
		ctrl.setProp(this.getAttribute("id"), this.getAttribute("value"));
	});
}

CV_panel.prototype = {
	// set our internal information:
	setContent: function(element, component) {
		if(this.panelType == "container") {
			CVPortal.warn(" {Panels} Refused to set content in a container panel, " + this.id);
		}
		if(this.panelType == "shared" && component == "self") {
			$(this.element).prepend(element);
			CVPortal.helpFactory().processHelpButtons(this.element);
		} else if(this.panelType == "shared") {
			$(this.sharedComps[component]).empty();
			$(this.sharedComps[component]).html(element);
			//add help button proccesing here...
			CVPortal.helpFactory().processHelpButtons(this.sharedComps[component]);
			// select the actual component:
			this.selectShared(component);
		} else {
			if(this.element) {
				$(this.element).empty();
				$(this.element).html(element);
				//add help button proccesing here...
				CVPortal.helpFactory().processHelpButtons(this.element);
			} else {
				this.errorNoElement();
			}
		}
		if (this.element) {
			$(this.element).trigger("resize");
		}
	},

	clean: function(component) {
		if(this.panelType == "container") {
			CVPortal.warn(" {Panels} Refused to clean content from container panel, " + this.id);
		}
		if(this.panelType == "shared") {
			$(this.sharedComps[component]).empty();
		} else {
			$(this.element).empty();
		}
	},

	/********************
	*
	* Dimension helpers:
	*
	*********************/
	setPanelHeight: function(h, repeated) {
		if(h == null) {
			h = this.height;
		}
		if(this.element && h != "*" && h != "na") {
			if((CVPortal.getBrowserType() == "MOZ" || CVPortal.getBrowserType() == "WEBKIT") && typeof(h) != "string") {
				CVPortal.warn(" {Panels} Setting panel height in Firefox, appending a PX to : " + h);
				h = h + "px";
			}
			if((CVPortal.getBrowserType() == "MOZ" || CVPortal.getBrowserType() == "WEBKIT") && typeof(h) == "string" && h.indexOf('px') != -1) {
				var height = parseInt(h, 10);
				var bL = parseInt($(this.element).css("border-top-width"), 10);
				var bR = parseInt($(this.element).css("border-bottom-width"), 10);
				var pR = parseInt($(this.element).css("padding-top"), 10);
				var pL = parseInt($(this.element).css("padding-bottom"), 10);
				var mR = parseInt($(this.element).css("margin-top"), 10);
				var mL = parseInt($(this.element).css("margin-bottom"), 10);
				height -= bL + bR + pR + pL + mR + mL;
				//CVPortal.warn("In mozilla height set, starting with " + parseInt(h, 10) + " and end with " + height);
				if(this.parent && repeated != true) {
					var parentPanel = this.factory.getPanel(this.parent);
					var bL = parseInt($(parentPanel.element).css("border-top-width"), 10);
					var bR = parseInt($(parentPanel.element).css("border-bottom-width"), 10);
					var pR = parseInt($(parentPanel.element).css("padding-top"), 10);
					var pL = parseInt($(parentPanel.element).css("padding-bottom"), 10);
					var mR = parseInt($(parentPanel.element).css("margin-top"), 10);
					var mL = parseInt($(parentPanel.element).css("margin-bottom"), 10);

					var mirror = bL + bR + pR + pL + mR + mL;
					height -= (mirror / 2);
				}
				//alert("Firefox Height check (" + this.id + "): initial H: " + parseInt(h, 10) + " modified H: " + height);
				if(height < 0) { height = 0; }
				h = height + "px";
			}
			$(this.element).height(h);
			// if a panel is a shared panel, then we need to assure that all shared component spaces are given the same dimensions:
			if(this.panelType == "shared") {
				CVPortal.info(" {Panels} Considering setting panel height for a shared panel " + this.id + ": panel info msgs will follow if set");

			}
			return parseInt(h, 10);
		} else {
			this.errorNoElement();
		}
	},

	setPanelWidth: function(w, repeated) {
		if(w == null) {
			w = this.width;
		}
		if(this.element && w != "*" && w != "na") {
			if(w == "100%" ) {
				if(this.parent) {
					//alert("Width as Parent: " + $(this.factory.getPanel(this.parent).getElement()).css("width"));
					$(this.element).css("width", $(this.factory.getPanel(this.parent).getElement()).css("width"));
				} else {
					//alert("WIDTH FULL! " + CVPortal.panelFactory().width);
					$(this.element).css("width", CVPortal.panelFactory().width);
				}
			 } else {
				if((CVPortal.getBrowserType() == "MOZ"  || CVPortal.getBrowserType() == "WEBKIT") && typeof(w) != "string") {
					//CVPortal.warn(" {Panels} Setting panel width in Firefox, appending a PX to : " + w);
					w = w + "px";
				}
				if((CVPortal.getBrowserType() == "MOZ" || CVPortal.getBrowserType() == "WEBKIT") && typeof(w) == "string" &&  w.indexOf('px') != -1) {
					var width = parseInt(w, 10);
					//alert("GOING IN WIDTH: " + width);
					var bL = parseInt($(this.element).css("border-left-width"), 10);
					var bR = parseInt($(this.element).css("border-right-width"), 10);
					var pR = parseInt($(this.element).css("padding-left"), 10);
					var pL = parseInt($(this.element).css("padding-right"), 10);
					var temp = bL + bR + pR + pL;
					//alert("REDUCTION VALUE: " + temp);
					width -= bL + bR + pR + pL;
					//alert("FINAL OUT: " + width);
					if(this.parent && repeated != true) {
						var parentPanel = this.factory.getPanel(this.parent);
						var bL = parseInt($(parentPanel.element).css("border-left-width"), 10);
						var bR = parseInt($(parentPanel.element).css("border-right-width"), 10);
						var pR = parseInt($(parentPanel.element).css("padding-left"), 10);
						var pL = parseInt($(parentPanel.element).css("padding-right"), 10);
						var mR = parseInt($(parentPanel.element).css("margin-left"), 10);
						var mL = parseInt($(parentPanel.element).css("margin-right"), 10);

						var mirror = bL + bR + pR + pL + mR + mL;
						width -= (mirror / 2);
					}
					if(width < 0) { width = 0; }
					//CVPortal.warn("Firefox Width check: panel ID = " + this.id + ", starting with " + w + " and end with " + width);
					w = width + "px";
				}
				$(this.element).width(w);
				return parseInt(w, 10);
			 }
			// if a panel is a shared panel, then we need to assure that all shared component spaces are given the same dimensions:
			if(this.panelType == "shared") {
				CVPortal.info(" {Panels} Considering setting panel width for a shared panel " + this.id + ": panel info msgs will follow if set");
				for(var i in this.sharedComps) {
					$(this.sharedComps[i]).width($(this.element).width());
					CVPortal.info(" {Shared Panels} " + i + " set width: " + $(this.sharedComps[i]).width());
				}
			}
		} else {
			this.errorNoElement();
		}
	},

	getPanelHeight: function(outer) {
		if(this.element) {
			if ((CVPortal.getBrowserType() == "MOZ" || CVPortal.getBrowserType() == "WEBKIT") && outer != true) {
				return $(this.element).innerHeight();
			} else {
				return $(this.element).outerHeight(true);
			}
		} else {
			this.errorNoElement();
			return 0;
		}
	},

	getPanelWidth: function() {
		if(this.element) {
			return $(this.element).outerWidth(true);
		} else {
			this.errorNoElement();
			return 0;
		}
	},

	//
	// Element Controllers:
	getElement: function(component) {
		// if this is a shared panel, make sure to return the proper element:
		if(this.panelType == "shared" && component) {
			return this.sharedComps[component];
		} else {
			//otherwise use the default element:
			if(this.element) {
				return this.element;
			} else {
				this.errorNoElement();
				return null;
			}
		}
		return null;
	},

	setElement: function() {
		//locates element and sets it:
		var panel = this;
		$("#" + this.id + ":first").each(function() {
			panel.element = this;
		});
		return panel.element;
	},

	errorNoElement: function () {
		CVPortal.error(" Encountered panel " + this.id + " without a registered element!");
	},

	//
	// Parerntal Controllers
	setParent: function(p) { // Set the Parent Panel's ID
		this.parent = p;
	},
	getParent: function() { // Get the Parent Panel's ID
		return this.parent;
	},

	loadTmpl: function(tmpl, async, component) {
		var panel = this;
		if(panel.panelType != "container") {  // CONTAINERS always refuse to load content!
			var tmpl = CVPortal.fetchSkinFile(tmpl);
			$.ajax( {
				type: "GET",
				url: tmpl,
				dataType: "html",
				async: async,
				error: function() {
					CVPortal.error(" Failed to load panel template ");
				},
				success: function(html) {
					panel.setContent(html, component);
					CVPortal.info("    {Panels} Loaded template into the panel " + panel.id + " for component: " + component);
				}
			});
		} else {
			CVPortal.warn(" {Panels} A container panel, " + panel.id + " attempted to load a template.  Load refused for panel communual safety.");
		}
	},

	/**********************
	*
	* Helper functions to avoid ever needing to access a panel's element:
	*
	***********************/
	registerSharedComponent: function(component) {
		if(this.panelType != "shared") {
			CVPortal.error(" {Panels} Component " + component + " tried to register a non-shared panel as shared: " + this.id);
		}
		if(this.sharedComps[component]) {
			CVPortal.warn(" {Panels} Attempt to register the same shared component twice.  Worrisome.");
		} else {
			if(this.element) {
				// Append the new element for storage in this panel:  (and hide it!)s
				$(this.element).append("<div style='display:none;' id='" + component + "'>&nbsp</div>");
				var panel = this; // store
				// store our new element in a simple hash so that when a component wants to access this panel, it gets this <div/>
				$("#" + component, this.element).each(function() {
					panel.sharedComps[component] = this;
					$(this).addClass(panel.element.className); //.getAttribute("class"));
					//alert(this.className + $(this).css("background-color"));
					//Manually fix height and width to meet the Real Panel that contains these shared component panels:
					//$(this).width($(panel.element).innerWidth());
					//$(this).height($(panel.element).innerHeight());
					CVPortal.info(" {Panels} 1) Shared panel " + this.id + " is of height(" + $(this).height() + ") and width(" + $(this).width() + ") and class(" + this.className + ");");
				});
				CVPortal.info(" {Panels} 2) This shared panel was registered to panel " + this.id + " to be shared by the component " + component);

			} else {
				this.errorNoElement();
			}
		}
	},

	selectShared: function(component) {
		if(this.panelType != "shared") {
			CVPortal.error(" {Panels} Component " + component + " tried to select a non-shared panel to show: " + this.id);
		}
		if(this.sharedComps[component]) {
			for(var i in this.sharedComps) {
				if(i != component) {
					this.sharedComps[i].style.display = "none";
				}
			}
			// update the two part history trail--current and the last shared comp:
			this.sharedComps[component].style.display = ""; //("normal");
			if(this.sharedLast != this.sharedCurrent) {
				this.sharedLast = this.sharedCurrent;
			}
			this.sharedCurrent = component;
		} else {
			CVPortal.error(" {Panels} Component " + component + " tried to select a shared component with which it has not registered.");
		}
	},

	unselectShared: function(component) {
		if(this.panelType != "shared") {
			CVPortal.error(" {Panels} Component " + component + " tried to unSelect a non-shared panel to show: " + this.id);
		}
		if(this.sharedComps[component]) {
			for(var i in this.sharedComps) {
				// blank all shared component spaces
				this.sharedComps[i].style.display = "none";
			}
			if(this.sharedLast != "") {
				this.sharedComps[this.sharedLast].style.display = ""; //("normal");
				// update the two part history trail--current and last shared comp:
				var temp = this.sharedCurrent;
				this.sharedCurrent = this.sharedLast;
				this.sharedLast = temp;
			}
		} else {
			CVPortal.error(" {Panels} Component " + component + " tried to unSelect a shared component with which it has not registered.");
		}

	}
};
